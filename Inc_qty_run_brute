import xlwings as xw
import datetime
import pandas as pd
import pdb
from pprint import pprint
import time
import os
from dateutil.parser import parse
import xlwings as xw







combinations = xw.Book('kamki_n.xlsx')
sht = combinations.sheets['Sheet2']

for row_no in range(2,3):

	try:
	

		slippage = 1  # Nifty Points

		list_1 = []
		final = {}
		final_res = {}
		trade_no = 1
		soda = 0 
		long_qty = 50
		short_qty = 50
		# max_diff = 40 # Diff for stoploss bar bar
		# target = 50 # target

		status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
		status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}

		result = {'Date'  : None , 'Entry_time' : None ,'exit_time' : None ,'Remark' : None , 'Remark_1' : None , 'Long_price' : None ,'short_price' : None ,'pnl'  : None, 'Cumulative' : None ,'Stoploss' : None ,'Target':None}





		target_par = float(sht.range('B' + str(row_no)).value)
		max_diff_par = float(sht.range('C' + str(row_no)).value)
		start_candle = int(sht.range('D' + str(row_no)).value)
		end_candle = int(sht.range('E' + str(row_no)).value)
		trade_start = int(sht.range('E' + str(row_no)).value)
		print(row_no)
		# print(f'Row_no = {row_no} , Target = {target_par}, Max_diff = {max_diff_par} , Start_candle = {start_candle} ,End_candle ={end_candle} , Trade_start = {trade_start}')
		# pdb.set_trace()

		input_file  = (r"E:\code_aa\intraday strategy nifty_new\second")
		os.chdir(input_file)

		files_list  = os.listdir(input_file)


		for file in files_list:

			df = pd.read_csv(file)  # original DataFrame 
			long_qty = 50
			# print(file)

			dff  = df.iloc[start_candle:end_candle] # Slicing the Data Frame to find the certain rows . Also making a new dataframe with new Date
			dff = dff[['low' , 'high']] # DataFrame selectiong Rows Jo kam ki hai sari rows me se.
			high = dff['high'].max()
			low = dff['low'].min()
			diff = (high -low)
			max_diff = int(high * max_diff_par) # Diff for stoploss bar bar
			target = int(high * target_par) # target
			df_trade = df.iloc[trade_start:]
			df_trade = df_trade.set_index(df_trade['date'])
			# pdb.set_trace()

			status_long['long'] = high
			status_long['short'] = low
			status_short['long'] = high
			status_short['short'] = low

			

			if diff < max_diff:

				

				for index, ohlc in df_trade.iterrows():
					ltp = df_trade.loc[index]['close']

					# print(f' Candle Time  = {index[11:16]}')
					# print(f' Trade_Number  =  {trade_no}')



					if (ltp > status_long['long']) and (status_long['Traded_long'] == None) and (status_long['done_p'] == None) and (long_qty <=350):
						# 
						status_long['Date'] = index[0:10]
						status_long['Long_price'] = ltp
						status_long['Entry_time'] = index[11:16]
						status_long['Target'] = status_long['long'] + target
						status_long['Stoploss'] = status_long['short']
						status_long['LTP'] = ltp
						status_long['Remark'] = 'Long_trade_1'
						status_long['Traded_long'] = 'Yes'
						status_long['Qty'] = long_qty
						long_qty = long_qty + 50
						# pdb.set_trace()
						# 

					if (ltp < status_short['short']) and (status_short['Traded_short']) == None and (status_short['done_sl'] == None) and (long_qty <=350):
						status_short['Date'] = index[0:10]
						status_short['short_price'] = ltp
						status_short['Entry_time'] = index[11:16]
						status_short['Target'] = status_short['short'] - target
						status_short['Stoploss'] = status_short['long']
						status_short['LTP'] = ltp
						status_short['Remark'] = 'Short_trade_1'
						status_short['Traded_short'] = 'Yes'
						status_short['Qty'] = long_qty
						long_qty = long_qty + 50
						# 


					if (status_long['Traded_long'] == 'Yes') and (status_long['Remark'] == 'Long_trade_1') and (status_long['done_p'] == None):
						

						if (ltp < status_long['Stoploss']) :
							status_long['pnl'] = round((ltp - status_long['Long_price']) *status_long['Qty'],2)
							status_long['exit_time'] = index[11:16]
							status_long['Remark_1'] = 'loss_booked'
							
						
						if ltp > status_long['Target'] :
							status_long['pnl'] = round((ltp - status_long['Long_price']) *status_long['Qty'],2)
							status_long['exit_time'] = index[11:16]
							status_long['Remark_1'] = 'Profit_booked'
							

						if index[11:16] == '15:15':
							status_long['pnl'] = round((ltp - status_long['Long_price']) *status_long['Qty'],2)
							status_long['exit_time'] = index[11:16]
							status_long['Remark_1'] = 'Market_over'


					if (status_long['pnl'] != None)  and (status_long['done_sl'] == None) and (status_long['Remark_1'] == 'loss_booked'):
						status_long['completed'] = 'Yes'
						final[trade_no] = status_long
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_long['long'] = high
						status_long['short'] = low
						# 

					if (status_long['pnl'] != None)  and (status_long['done_p'] == None) and (status_long['Remark_1'] == 'Profit_booked') :
						status_long['completed'] = 'Yes'
						final[trade_no] = status_long
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_long['long'] = high
						status_long['short'] = low
						status_long['Traded_long'] = 'Already_short_booked_Profit'
						status_short['Traded_short'] = 'Already_short_booked_Profit'
						# pdb.set_trace()

					if (status_long['pnl'] != None)  and (status_long['done_MO'] == None) and (status_long['Remark_1'] == 'Market_over') :
						status_long['completed'] = 'Yes'
						final[trade_no] = status_long
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_long['long'] = high
						status_long['short'] = low
							
							
					if (status_short['Traded_short'] == 'Yes') and (status_short['Remark'] == 'Short_trade_1') and (status_short['done_sl'] == None):

						if ltp < status_short['Target'] :
							status_short['pnl'] = round((status_short['short_price'] - ltp) *status_short['Qty'],2)
							status_short['exit_time'] = index[11:16]
							status_short['Remark_1'] = 'Profit_booked'
							# 
							
							

						if ltp > status_short['Stoploss'] :
							status_short['pnl'] = round((status_short['short_price'] - ltp) *status_short['Qty'],2)
							status_short['exit_time'] = index[11:16]
							status_short['Remark_1'] = 'loss_booked'
							# 
							
						if index[11:16] == '15:15':
							status_short['pnl'] = round((status_short['short_price'] - ltp) *status_short['Qty'],2)
							status_short['exit_time'] = index[11:16]
							status_short['Remark_1'] = 'Market_over'
							# 
					
					if (status_short['pnl'] != None)  and (status_short['done_sl'] == None) and (status_short['Remark_1'] == 'loss_booked'):
						status_short['completed'] = 'Yes'
						final[trade_no] = status_short
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_short['long'] = high
						status_short['short'] = low
						# 

					if (status_short['pnl'] != None)  and (status_short['done_p'] == None) and (status_short['Remark_1'] == 'Profit_booked') :
						status_short['completed'] = 'Yes'
						final[trade_no] = status_short
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_short['long'] = high
						status_short['short'] = low
						status_short['Traded_short'] = 'Already_short_booked_Profit'
						status_long['Traded_long'] = 'Already_short_booked_Profit'
						# print(index)
						# 

					if (status_short['pnl'] != None)  and (status_short['done_MO'] == None) and (status_short['Remark_1'] == 'Market_over') :
						status_short['completed'] = 'Yes'
						final[trade_no] = status_short
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_short['long'] = high
						status_short['short'] = low
						# print('oooooooooooooooooooooooooo')
						# 


					# if result['pnl'] != None :
					# 	pdb.set_trace()

					# 	if result['pnl'].sum() > 0:
					# 		status_long['done_p'] = 'Done_for_the_day'
					# 		status_short['done_sl'] = 'Done_for_the_day'

				
			status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
			status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
			# pdb.set_trace()
		os.chdir(r'E:\code_aa\intraday strategy nifty_new\res')
		# pdb.set_trace()
		# result= result[['Date' , 'Entry_time','exit_time','Remark', 'Remark_1', 'Long_price','short_price','pnl' , 'Cumulative','Stoploss','Target' , 'Drawdown_main']]
		result.to_csv(str(row_no) + '.csv')
		# pdb.set_trace()
		ddff =  pd.read_csv(str(row_no) + '.csv')

		ddff['Cumulative'] = ddff.pnl.cumsum().round(2)
		ddff['HighValue'] = ddff['Cumulative'].cummax()

		ddff['Drawdown_main'] = ddff['Cumulative'] - ddff['HighValue']
		max_drawdown = ddff.describe().T.loc['Drawdown_main'].min()

		# print(f'max_drawdown =  {max_drawdown}')
		Total_profit = result['pnl'].sum()
		# print(result)		


		# print(f'max_drawdown =  {max_drawdown}')
		# print(f'Total Profit = {Total_profit}')
		# print(f'max_drawdown to profit = {Total_profit/round(abs(max_drawdown),1)}')


		sht.range('F' + str(row_no)).value = Total_profit
		sht.range('G' + str(row_no)).value = max_drawdown
		sht.range('H' + str(row_no)).value = result.shape[0]
		os.chdir(r"E:\code_aa\intraday strategy nifty_new\res")
		long_qty = 0
		# sht.range('I' + str(row_no)).value = Total_profit

	
	except Exception as e:
			pass
	# pdb.set_trace()

# os.chdir(r"C:\Users\Admin\Desktop\Code_back\Result_final_storage\ooo")
# ddff.to_excel( res_file + '.xlsx')
# (?# path = os.chdir(r"C:\Users\Admin\Desktop\Code_back\Result_final_storage"))



