import xlwings as xw
import datetime
import pandas as pd
import pdb
from pprint import pprint
import time
import os ,calendar
from dateutil.parser import parse
import xlwings as xw

def get_inputs(row_no):
	global target_par,max_diff_par,start_candle,end_candle,trade_start

	target_par = float(sht.range('B' + str(row_no)).value)
	max_diff_par = float(sht.range('C' + str(row_no)).value)
	start_candle = int(sht.range('D' + str(row_no)).value)
	end_candle = int(sht.range('E' + str(row_no)).value)
	trade_start = int(sht.range('E' + str(row_no)).value)
	print(row_no)
	return target_par,max_diff_par,start_candle,end_candle,trade_start

def init():
	global slippage,list_1,final,final_res,trade_no,soda,qty,status_long,status_short,result

	slippage = 1  # Nifty Points
	list_1 = []
	final = {}
	final_res = {}
	trade_no = 1
	soda = 0 
	qty = 50
	status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
	status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
	result = {'Date'  : None , 'Entry_time' : None ,'exit_time' : None ,'Remark' : None , 'Remark_1' : None , 'Long_price' : None ,'short_price' : None ,'pnl'  : None, 'Cumulative' : None ,'Stoploss' : None ,'Target':None}



combinations = xw.Book('kamki_n.xlsx')
sht = combinations.sheets['Sheet2']

for row_no in range(2,3):

	try:
		init()
		get_inputs(row_no=row_no)
		
		input_file  = (r"E:\code_aa\intraday strategy nifty_new\second")
		os.chdir(input_file)

		files_list  = os.listdir(input_file)


		for file in files_list:

			df = pd.read_csv(file)  # original DataFrame 
			# print(file)

			dff  = df.iloc[start_candle:end_candle] # Slicing the Data Frame to find the certain rows . Also making a new dataframe with new Date
			dff = dff[['low' , 'high']] # DataFrame selectiong Rows Jo kam ki hai sari rows me se.
			high = dff['high'].max()
			low = dff['low'].min()
			diff = (high -low)
			max_diff = int(high * max_diff_par) # Diff for stoploss bar bar
			target = int(high * target_par) # target
			df_trade = df.iloc[trade_start:]
			df_trade = df_trade.set_index(df_trade['date'])
			# pdb.set_trace()

			status_long['long'] = high
			status_long['short'] = low
			status_short['long'] = high
			status_short['short'] = low

			
			if diff < max_diff:

				
				for index, ohlc in df_trade.iterrows():
					ltp = df_trade.loc[index]['close']

					
					if (ltp > status_long['long']) and (status_long['Traded_long'] == None) and (status_long['done_p'] == None):
						# 
						status_long['Date'] = index[0:10]
						status_long['Long_price'] = ltp
						status_long['Entry_time'] = index[11:16]
						status_long['Target'] = status_long['long'] + target
						status_long['Stoploss'] = status_long['short']
						status_long['LTP'] = ltp
						status_long['Remark'] = 'Long_trade_1'
						status_long['Traded_long'] = 'Yes'
						status_long['Qty'] = 50
						status_long['Day'] = parse(status_long['Date']).strftime("%A")
						status_long['Year'] = parse(status_long['Date']).year
						status_long['Month'] = calendar.month_name[parse(status_long['Date']).month]
						# 

					if (ltp < status_short['short']) and (status_short['Traded_short']) == None and (status_short['done_sl'] == None):
						status_short['Date'] = index[0:10]
						status_short['short_price'] = ltp
						status_short['Entry_time'] = index[11:16]
						status_short['Target'] = status_short['short'] - target
						status_short['Stoploss'] = status_short['long']
						status_short['LTP'] = ltp
						status_short['Remark'] = 'Short_trade_1'
						status_short['Traded_short'] = 'Yes'
						status_short['Qty'] = 50
						status_short['Day'] = parse(status_short['Date']).strftime("%A")
						status_short['Year'] = parse(status_short['Date']).year
						status_short['Month'] = calendar.month_name[parse(status_short['Date']).month]


					if (status_long['Traded_long'] == 'Yes') and (status_long['Remark'] == 'Long_trade_1') and (status_long['done_p'] == None):
						

						if (ltp < status_long['Stoploss']) :
							status_long['pnl'] = round((ltp - status_long['Long_price']) *status_long['Qty'],2)
							status_long['exit_time'] = index[11:16]
							status_long['Remark_1'] = 'loss_booked'
							
						
						if ltp > status_long['Target'] :
							status_long['pnl'] = round((ltp - status_long['Long_price']) *status_long['Qty'],2)
							status_long['exit_time'] = index[11:16]
							status_long['Remark_1'] = 'Profit_booked'
							

						if index[11:16] == '15:15':
							status_long['pnl'] = round((ltp - status_long['Long_price']) *status_long['Qty'],2)
							status_long['exit_time'] = index[11:16]
							status_long['Remark_1'] = 'Market_over'


					if (status_long['pnl'] != None)  and (status_long['done_sl'] == None) and (status_long['Remark_1'] == 'loss_booked'):
						status_long['completed'] = 'Yes'
						final[trade_no] = status_long
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_long['long'] = high
						status_long['short'] = low
						# 

					if (status_long['pnl'] != None)  and (status_long['done_p'] == None) and (status_long['Remark_1'] == 'Profit_booked') :
						status_long['completed'] = 'Yes'
						final[trade_no] = status_long
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_long['long'] = high
						status_long['short'] = low
						status_long['Traded_long'] = 'Already_short_booked_Profit'
						status_short['Traded_short'] = 'Already_short_booked_Profit'
						# pdb.set_trace()

					if (status_long['pnl'] != None)  and (status_long['done_MO'] == None) and (status_long['Remark_1'] == 'Market_over') :
						status_long['completed'] = 'Yes'
						final[trade_no] = status_long
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_long['long'] = high
						status_long['short'] = low
							
							
					if (status_short['Traded_short'] == 'Yes') and (status_short['Remark'] == 'Short_trade_1') and (status_short['done_sl'] == None):

						if ltp < status_short['Target'] :
							status_short['pnl'] = round((status_short['short_price'] - ltp) *status_short['Qty'],2)
							status_short['exit_time'] = index[11:16]
							status_short['Remark_1'] = 'Profit_booked'
							# 
							
							

						if ltp > status_short['Stoploss'] :
							status_short['pnl'] = round((status_short['short_price'] - ltp) *status_short['Qty'],2)
							status_short['exit_time'] = index[11:16]
							status_short['Remark_1'] = 'loss_booked'
							# 
							
						if index[11:16] == '15:15':
							status_short['pnl'] = round((status_short['short_price'] - ltp) *status_short['Qty'],2)
							status_short['exit_time'] = index[11:16]
							status_short['Remark_1'] = 'Market_over'
							# 
					
					if (status_short['pnl'] != None)  and (status_short['done_sl'] == None) and (status_short['Remark_1'] == 'loss_booked'):
						status_short['completed'] = 'Yes'
						final[trade_no] = status_short
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_short['long'] = high
						status_short['short'] = low
						# 

					if (status_short['pnl'] != None)  and (status_short['done_p'] == None) and (status_short['Remark_1'] == 'Profit_booked') :
						status_short['completed'] = 'Yes'
						final[trade_no] = status_short
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_short['long'] = high
						status_short['short'] = low
						status_short['Traded_short'] = 'Already_short_booked_Profit'
						status_long['Traded_long'] = 'Already_short_booked_Profit'
						# print(index)
						# 

					if (status_short['pnl'] != None)  and (status_short['done_MO'] == None) and (status_short['Remark_1'] == 'Market_over') :
						status_short['completed'] = 'Yes'
						final[trade_no] = status_short
						trade_no = trade_no+1
						result = pd.DataFrame(final).T
						status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
						status_short['long'] = high
						status_short['short'] = low
						# print('oooooooooooooooooooooooooo')
						# 


				
			status_short = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
			status_long = {'done_MO' : None ,'done_p' :None ,'done_sl': None, 'completed':None,'Remark_1': None,'long' : None , 'short' : None , 'Date': None , 'short_price': None ,'Entry_time': None , 'Target': None , 'Stoploss': None ,'LTP': None ,'Remark': None ,'Traded_short' : None, 'Traded_long': None , 'Qty': None , 'pnl' :None, 'exit_time' : None , 'Long_price':None}
		
		os.chdir(r'E:\code_aa\intraday strategy nifty_new\res')
		# pdb.set_trace()
		result.to_csv(str(row_no) + '.csv')
		ddff =  pd.read_csv(str(row_no) + '.csv')

		ddff['Cumulative'] = ddff.pnl.cumsum().round(2)
		ddff['HighValue'] = ddff['Cumulative'].cummax()

		ddff['Drawdown_main'] = ddff['Cumulative'] - ddff['HighValue']
		max_drawdown = ddff.describe().T.loc['Drawdown_main'].min()
		# pdb.set_trace()



		ddff= ddff[['Date','Traded_long','Traded_short','Long_price','short_price','completed','Entry_time','exit_time','Target','Stoploss','Remark_1','Qty','pnl','Cumulative','HighValue','Drawdown_main','Day','Year','Month']]
		ddff.to_csv(str(row_no) + '.csv')

		# print(f'max_drawdown =  {max_drawdown}')
		Total_profit = ddff['pnl'].sum()
		# print(result)		


		# print(f'max_drawdown =  {max_drawdown}')
		# print(f'Total Profit = {Total_profit}')
		# print(f'max_drawdown to profit = {Total_profit/round(abs(max_drawdown),1)}')

		# pdb.set_trace()

		sht.range('F' + str(row_no)).value = Total_profit
		sht.range('G' + str(row_no)).value = max_drawdown
		sht.range('H' + str(row_no)).value = result.shape[0]
		
		os.chdir(r"E:\code_aa\intraday strategy nifty_new\res")
		# sht.range('I' + str(row_no)).value = Total_profit

	
	except Exception as e:
			pass
	# pdb.set_trace()

# os.chdir(r"C:\Users\Admin\Desktop\Code_back\Result_final_storage\ooo")
# ddff.to_excel( res_file + '.xlsx')
# (?# path = os.chdir(r"C:\Users\Admin\Desktop\Code_back\Result_final_storage"))



